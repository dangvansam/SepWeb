# import sys
# import speechbrain as sb
# from speechbrain.utils.distributed import run_on_main
# from hyperpyyaml import load_hyperpyyaml

# from prepare_data import prepare_wsjmix
# from train import Separation



# def dataio_prep(hparams):
#     """Creates data processing pipeline"""

#     # 1. Define datasets


#     test_data = sb.dataio.dataset.DynamicItemDataset.from_csv(
#         csv_path=hparams["test_data"],
#         replacements={"data_root": hparams["data_folder"]},
#     )

#     # datasets = [train_data, valid_data, test_data]
#     datasets = [test_data]

#     # 2. Provide audio pipelines

#     @sb.utils.data_pipeline.takes("mix_wav")
#     @sb.utils.data_pipeline.provides("mix_sig")
#     def audio_pipeline_mix(mix_wav):
#         mix_sig = sb.dataio.dataio.read_audio(mix_wav)
#         return mix_sig

#     @sb.utils.data_pipeline.takes("s1_wav")
#     @sb.utils.data_pipeline.provides("s1_sig")
#     def audio_pipeline_s1(s1_wav):
#         s1_sig = sb.dataio.dataio.read_audio(s1_wav)
#         return s1_sig

#     @sb.utils.data_pipeline.takes("s2_wav")
#     @sb.utils.data_pipeline.provides("s2_sig")
#     def audio_pipeline_s2(s2_wav):
#         s2_sig = sb.dataio.dataio.read_audio(s2_wav)
#         return s2_sig

#     if hparams["num_spks"] == 3:

#         @sb.utils.data_pipeline.takes("s3_wav")
#         @sb.utils.data_pipeline.provides("s3_sig")
#         def audio_pipeline_s3(s3_wav):
#             s3_sig = sb.dataio.dataio.read_audio(s3_wav)
#             return s3_sig

#     if "wham" in hparams["data_folder"]:

#         @sb.utils.data_pipeline.takes("noise_wav")
#         @sb.utils.data_pipeline.provides("noise_sig")
#         def audio_pipeline_noise(noise_wav):
#             noise_sig = sb.dataio.dataio.read_audio(noise_wav)
#             return noise_sig

#     sb.dataio.dataset.add_dynamic_item(datasets, audio_pipeline_mix)
#     sb.dataio.dataset.add_dynamic_item(datasets, audio_pipeline_s1)
#     sb.dataio.dataset.add_dynamic_item(datasets, audio_pipeline_s2)
#     if hparams["num_spks"] == 3:
#         sb.dataio.dataset.add_dynamic_item(datasets, audio_pipeline_s3)
#         sb.dataio.dataset.set_output_keys(
#             datasets, ["id", "mix_sig", "s1_sig", "s2_sig", "s3_sig"]
#         )
#     else:
#         if "wham" in hparams["data_folder"]:
#             print("Using the WHAM! dataset")
#             sb.dataio.dataset.add_dynamic_item(datasets, audio_pipeline_noise)
#             sb.dataio.dataset.set_output_keys(
#                 datasets, ["id", "mix_sig", "s1_sig", "s2_sig", "noise_sig"]
#             )
#         else:
#             sb.dataio.dataset.set_output_keys(
#                 datasets, ["id", "mix_sig", "s1_sig", "s2_sig"]
#             )

#     return test_data


# if __name__ == "__main__":

#     # Load hyperparameters file with command-line overrides
#     hparams_file, run_opts, overrides = sb.parse_arguments(sys.argv[1:])
#     with open(hparams_file) as fin:
#         hparams = load_hyperpyyaml(fin, overrides)

#     # Data preparation
#     # prepare_test.get_wsj_files(hparams["data_folder"])
#     run_on_main(
#         prepare_wsjmix,
#         kwargs={
#             "type": "tt",
#             "datapath": hparams["data_folder"],
#             "savepath": hparams["save_folder"],
#             "n_spks": hparams["num_spks"],
#             "skip_prep": hparams["skip_prep"],
#         },
#     )
#     # Create dataset objects

#     test_data = dataio_prep(hparams)

#     # Brain class initialization
#     checkpoint = hparams["checkpointer"]
#     checkpoint.recover_if_possible()
    
#     separator = Separation(
#         modules=hparams["modules"],
#         opt_class=hparams["optimizer"],
#         hparams=hparams,
#         run_opts=run_opts,
#         checkpointer=checkpoint,
#     )

#     # Eval
#     separator.evaluate(min_key="si-snr")
#     separator.save_results(test_data)

import matplotlib.pyplot as plt
import numpy as np

data_19k_val = [
    [0.9443996473623,-6.12312123],
    [1.9443996473623,-8.126389123],
    [2.9443996473623,-10.7887687],
    [3.2817907278256,-10.9900998839182],
    [3.8392194694605,-12.8530854151719],
    [4.0592571306322,-12.691724463646],
    [4.2059489047467,-13.1904764956352],
    [4.3673098562726,-13.3958449793954],
    [4.54333998521,-13.9679428984418],
    [4.7340392915588,-14.2466572692593],
    [4.9,-14.2],
    [5.4821673395426,-14.4813641078425],
    [5.6581974684799,-15.024123672066],
    [6.1569495004691,-15.1121387365347],
    [6.4356638712866,-14.8187551883057],
    [6.5676864679896,-15.2441613332377],
    [6.87573919363,-15.5522140588781],
    [7.271806983739,-15.5962215911124],
    [7.4771754674993,-15.7869208974612],
    [7.7705590157282,-15.713575010404],
    [7.9905966768999,-16.0656352682787],
    [8.2399726928945,-15.8749359619299],
    [8.5626945959463,-16.1829886875702],
    [8.9,-16.2],
    [9.3988377083988,-16.4470338809763],
    [9.6586034210863,-16.3689090581704],
    [9.8389130307422,-16.4763722357992],
    [10.0138868380798,-16.465521215423],
    [10.1909732886169,-16.6524023647365],
    [10.4096850306953,-16.5465507666672],
    [10.5499284847717,-16.6026481482977],
    [10.7337328528404,-16.7257482517938],
    [10.9467518348315,-16.7535785454835],
    [11.2968816039388,-16.8368526527307],
    [11.54053761047,-16.9457859129655],
    [11.8351534599833,-16.8539327582432],
    [12.1566430617507,-16.9751242677884],
    [12.3793567403758,-16.5925666274481],
    [12.5270741198102,-17.0840875495779],
    [12.9,-17.2],
    [13.1,-17],
    [13.2679591779151,-17.1828722239919],
    [13.4602782577057,-17.1487258463991],
    [13.6328455782678,-17.1673817729463],
    [13.8194048437404,-17.3632690016926],
    [14.1552115215911,-17.2559974240458],
    [14.3510987503373,-17.4099088180607],
    [14.5469859790836,-17.3819249282398],
    [14.7,-17.2],
    [14.9107765467551,-17.4332287262448],
    [15.0926718305909,-17.3073012220508],
    [15.2512472062426,-17.4938604875234],
    [15.4471344349889,-17.5778121569861],
    [15.5981231175907,-17.3840975960648],
    [15.7997560773587,-17.1908660096204],
    [15.9929876638031,-17.3042845494899],
    [16.1544757485003,-17.6763294385026],
    [16.3667511243798,-17.6058417491968]
]

data_14k_val = [
    [1, -1.34],
    [2, -2.03],
    [3, -2.47],
    [4, -3.04],
    [5, -3.29],
]

data_8k_val = [
    [4.7056308114872,-5.2660014398936], 
    [5,-5], 
    [5.2542761910196,-5.9677571579001], 
    [5.4584233089851,-5.980516352773], 
    [5.5860152577136,-6.6695128759066], 
    [5.8796953748092,-7.0161134724539], 
    [6.0198278833903,-7.3712685939131], 
    [6.0963830526274,-7.8688771939541], 
    [6.3110440095926,-7.9938370446295], 
    [6.4260703122015,-8.2756514860213], 
    [6.6503716022888,-8.7645132721091], 
    [6.845916316724,-8.9255500957616], 
    [7.0127044555069,-9.1210948101967], 
    [7.1679899640289,-9.1498513858489], 
    [7.3405294179422,-9.5581947601105], 
    [7.5,-9.5], 
    [7.7143649014211,-10.2426012606335], 
    [7.8869043553345,-10.2943630968075], 
    [8.2205348880703,-10.8973129675509], 
    [8.4280198883157,-11.1245380959716], 
    [8.5551824913636,-11.4935589832476], 
    [8.7446797037485,-11.3414625364649], 
    [8.9890313723502,-11.685549580006], 
    [9.1087138222775,-11.7379106518493], 
    [9.2682904221807,-11.6680958893916], 
    [9.4552942501922,-12.0221564704267], 
    [9.7744474499984,-12.0670373891495], 
    [9.941504203022,-12.3961641264497], 
    [10.1409749529009,-12.715317326256], 
    [10.3404457027798,-12.5981282607021], 
    [10.4850619964421,-12.8325063918098], 
    [10.6620922869596,-12.7477313231113], 
    [10.895393378473,-12.9184268048224], 
    [11.0096648953499,-12.9400457404478],
    [11.1795279609777,-13.2272687423276],
    [11.3895404784812,-12.9724741438858],
    [11.7153687225492,-13.3816897110802],
    [11.8929528366147,-13.4156623242058],
    [12.0844348378679,-13.2998465976413],
    [12.4,-13.6],
    [12.65752937123,-13.594000776693],
    [12.8190192249131,-13.6638993700782],
    [13.2070769330173,-13.847081890674],
    [13.493902195529,-13.8350304090558],
    [13.5999552337687,-14.0881115230368],
    [13.8144716065716,-13.8928775208229],
    [14.1470924992323,-14.2857558215743],
    [14.3158132418863,-14.2254984134836],
    [14.8581299147027,-13.8229789274377],
    [15.0437227316221,-13.9001084097938],
    [15.2003919926579,-14.1339071531858],
    [15.4056973816059,-13.9523393685322],
    [15.6,-14.1],
    [15.7390055231942,-14.3422015991265],
    [15.8954317268278,-14.343404877616],
    [16.0771267787406,-14.0714639389916],
    [16.2636349446114,-14.505847473697],
    [16.4752921411054,-14.4551050273001],
    [16.6578203172269,-14.5023325973455],
    [16.9258686877551,-14.6018934206845],
    [17.1339252801174,-14.4270237694352],
    [17.3727657836775,-14.5289130918147],
    [17.6445942112004,-14.6892542840863],
    [17.8287360491998,-14.4036465353525],
    [18.0228992117162,-14.4850697970529],
    [18.1544290960015,-14.7030336052971],
    [18.3755168836573,-14.6331445763941], 
    [18.49783667231,-14.776870328061], 
    [18.680363703522,-14.2749706493421], 
    [18.8982935837327,-14.6448516386906], 
    [19.0402479093746,-14.8507853787062],
    [19.2641758596828,-14.7388214035521],
    [19.5340890140722,-14.7748098241373],
    [19.7419649568333,-15.0467839370675],
    [19.9,-15.2], 
    [20.1278372224751,-15.1933177088303], 
    [20.2466923929049,-15.0923722216159], 
    [20.4241610720398,-15.2177400041241], 
    [20.6472180357231,-15.1493575773015],
    [21.0156112105385,-15.2411056083866],
    [21.2075662996587,-15.3248678290936], 
    [21.4867737020153,-15.2027145905625],
    [21.8253126773727,-15.4522562064188], 
    [22.2266733182603,-15.4435309750951], 
    [22.7419333606897,-15.5323976039225], 
    [23.1536234520497,-15.488774812785], 
    [23.4859769343776,-15.5648191768791], 
    [23.9409866486145,-15.5270385868883], 
    [24.2103786815922,-15.5319664899305], 
]

data_8k_train = [
    [4.7102027624761,-5.6170644545325],
    [5.0030470855983,-5.9310782467961],
    [5.2676654498653,-6.3191851810544],
    [5.4334929581393,-6.7108203601695],
    [5.6,-7],
    [5.8,-7.4],
    [6.0121251146699,-8.0480251609322],
    [6.0994571815336,-8.2579364965277],
    [6.2923849461735,-8.7748372999024],
    [6.4234302202685,-9.091530045632],
    [6.6454791569295,-9.4810257214143],
    [6.8456872145746,-9.9469644737521],
    [6.9876529281775,-10.2854980984975],
    [7.2,-10.2],
    [7.355307724944,-10.5767098187086],
    [7.5324700937183,-10.9632200277335],
    [7.7212161393949,-11.3552310456773],
    [7.9564204417147,-11.6938626638316],
    [8.2656758865389,-12.1138449600313],
    [8.439903005625,-12.4441505399654],
    [8.6177598563588,-12.6837128287088],
    [8.7774680488543,-12.9740913605189],
    [8.9562974017644,-13.2103427199069],
    [9.0785045857705,-13.4492022159188],
    [9.3451384417837,-13.4269827279177],
    [9.5,-13.5],
    [9.772863585805,-13.8435981279384],
    [9.9506194898138,-14.1824453199552],
    [10.1394851378232,-14.560176615974],
    [10.3727897618348,-14.5657314879743],
    [10.6172041298469,-14.5823961039751],
    [10.8217352403223,-14.8614573971372],
    [11.0381078910519,-14.828169297025],
    [11.1712602915008,-15.0861520728949],
    [11.3709888921743,-15.2609145984841],
    [11.5707174928477,-15.2609145984841],
    [11.745480018437,-15.4939312992698],
    [11.9868187442507,-15.6187616746907],
    [12.2364794950925,-15.7103039499994],
    [12.4861402459343,-15.8850664755886],
    [12.9022414973373,-16.1264052014024],
    [13.1685462982352,-16.1680153265427],
    [13.4265290741051,-16.2762016519074],
    [13.7344440001433,-16.5008963276651],
    [14,-16.5],
    [14.1921553766866,-16.7339130284507],
    [14.4917482776968,-16.8171332787313],
    [14.9078495290998,-16.3427778521319],
    [15.074290029661,-16.5008963276651],
    [15.1992459536466,-16.8551840472414],
    [15.4330771152202,-16.933127767766],
    [15.6755686901854,-17.0240621083779],
    [15.8834186115842,-17.1279870690773],
    [16.0782779128955,-17.1756193427312],
    [16.2558163874236,-17.0803547954234],
    [16.4550058954308,-17.3055255436054],
    [16.7278089172666,-17.3444974038677],
    [16.9445566996586,-17.4262641562379],
    [17.1353227016255,-17.4017370988421],
    [17.2682604804278,-17.4773479637504],
    [17.4249972558063,-17.6027373840532],
    [17.6550307736219,-17.7141096943628],
    [17.8629587376993,-17.7233140735863],
    [18.0619004254648,-17.7151383877878],
    [18.2008870840407,-17.7560168167807],
    [18.3753017144105,-17.7505663595816],
    [18.5115631443868,-17.8323232175674],
    [18.7049387131342,-17.7367409961788],
    [18.8618732017033,-17.6960542769202],
    [19.0304324672035,-17.8646135424204],
    [19.2919899481521,-17.8907692905152],
    [19.5186730983075,-18.0244542252223],
    [19.7133881119026,-18.3731975331537],
    [19.9022907370321,-18.5679125467488],
    [20.1144429160238,-18.6202240429385],
    [20.283002181524,-18.6783479275938],
    [20.5213101086105,-18.6812541218265],
    [20.7375467184937,-18.7759626049184],
    [21.0677699485422,-18.7798938338476],
    [21.2839875396454,-18.897830701722],
    [21.6338669143397,-18.897830701722],
    [21.8697406500887,-19.1533605821167],
    [22.2,-19.2],
    [22.6,-19.4],
    [23.06483424455,-19.3892343178657],
    [23.3478827274487,-19.4993087278819],
    [23.9100484643171,-19.5268273303859],
    [24.2638590679405,-19.5740020775357],
]

# DATA 8K 
# --------------
x, y = np.array(data_8k_val).T
x0 = x[0]
xtail = x[-1] - x0
x = [(x[i] - x0) * (120/xtail) for i in range(len(x))]
data_8k_val = x, y

x, y = np.array(data_8k_train).T
x0 = x[0]
xtail = x[-1] - x0
ytail = y[-1]
x = [(x[i] - x0) * (120/xtail) for i in range(len(x))]
y = [ y[i] * (-17.1/ytail) for i in range(len(x))]
data_8k_train = [[x[i], y[i]] for i in range(len(x))]
print(data_8k_train)
# --------------

# DATA 14K 
# --------------
x, y = np.array(data_14k_val).T
data_14k_val = x, y
# --------------

# DATA 19K 
# --------------
x, y = np.array(data_19k_val).T
x0 = x[0]
xtail = x[-1] - x0
x = [(x[i] - x0) * (140/xtail) for i in range(len(x))]
data_19k_val = x, y
# --------------

x_8k, y_8k = data_8k_val
x_14k, y_14k = data_14k_val
x_19k, y_19k = data_19k_val

# print(x_19k)


data_8k_val = {1: -5.2660014398936, 2: -5.0, 3: -5.9677571579001, 4: -5.980516352773, 5: -6.6695128759066, 7: -7.0161134724539, 8: -7.3712685939131, 9: -7.8688771939541, 10: -7.9938370446295, 11: -8.2756514860213, 12: -8.7645132721091, 13: -8.9255500957616, 14: -9.1210948101967, 15: -9.1498513858489, 16: -9.5581947601105, 17: -9.5, 19: -10.2426012606335, 20: -10.2943630968075, 22: -10.8973129675509, 23: -11.1245380959716, 24: -11.4935589832476, 25: -11.3414625364649, 26: -11.685549580006, 27: -11.7379106518493, 28: -11.6680958893916, 29: -12.0221564704267, 31: -12.0670373891495, 32: -12.3961641264497, 33: -12.715317326256, 35: -12.5981282607021, 36: -12.8325063918098, 37: -12.7477313231113, 38: -12.9184268048224, 39: -12.9400457404478, 40: -13.2272687423276, 41: -12.9724741438858, 43: -13.3816897110802, 44: -13.4156623242058, 45: -13.2998465976413, 47: -13.6, 49: -13.594000776693, 50: -13.6638993700782, 52: -13.847081890674, 54: -13.8350304090558, 55: -14.0881115230368, 56: -13.8928775208229, 58: -14.2857558215743, 59: -14.2254984134836, 62: -13.8229789274377, 64: -13.9001084097938, 65: -14.1339071531858, 66: -13.9523393685322, 67: -14.1, 68: -14.3422015991265, 69: -14.343404877616, 70: -14.0714639389916, 71: -14.505847473697, 72: -14.4551050273001, 74: -14.5023325973455, 75: -14.6018934206845, 76: -14.4270237694352, 78: -14.5289130918147, 80: -14.6892542840863, 81: -14.4036465353525, 82: -14.4850697970529, 83: -14.7030336052971, 84: -14.6331445763941, 85: -14.776870328061, 86: -14.2749706493421, 87: -14.6448516386906, 88: -14.8507853787062, 90: -14.7388214035521, 91: -14.7748098241373, 92: -15.0467839370675, 93: -15.2, 95: -15.1933177088303, 96: -15.0923722216159, 97: -15.2177400041241, 98: -15.1493575773015, 100: -15.2411056083866, 102: -15.3248678290936, 103: -15.2027145905625, 105: -15.4522562064188, 108: -15.4435309750951, 111: -15.5323976039225, 113: -15.488774812785, 116: -15.5648191768791, 118: -15.5270385868883, 120: -15.5319664899305, 6: -6.592087604479564, 18: -10.10984234197884, 21: -10.77285068188116, 30: -12.145027523072613, 34: -12.549455634659338, 42: -13.176554634647758, 46: -13.437876533243937, 48: -13.558166455455874, 51: -13.724798014495796, 53: -13.825791438086094, 57: -14.000731122461474, 60: -14.10676924468032, 61: -14.137312024081734, 63: -14.19153354869327, 73: -14.366477728690889, 77: -14.42780950098512, 79: -14.465675129016201, 89: -14.787525313045679, 94: -15.025626738760437, 99: -15.26290059194533, 101: -15.342137003597243, 104: -15.430095696960846, 106: -15.463401430210084, 107: -15.471926085710567, 109: -15.473613522102942, 110: -15.46786840832415, 112: -15.448295646442487, 114: -15.429366449302691, 115: -15.426256637433582, 117: -15.45015571894731, 119: -15.545875405300372}
data_8k_val = dict(sorted(data_8k_val.items()))
x_8k = list(data_8k_val.keys())           # list() needed for python 3.x
x_8k = [i*0.5 for i in x_8k]
y_8k = list(data_8k_val.values())  

data_14k_val = {0: -4.907111064565615, 2: -5.181435948482434, 4: -5.520489175795285, 5: -5.862624705174534, 6: -6.1152542809513095, 8: -6.464697382719956, 9: -7.030817188370641, 10: -7.214197358887867, 11: -7.6657659089827686, 12: -7.94243114742122, 14: -8.282697590098325, 15: -8.68974529722616, 16: -8.985490896936199, 18: -8.91079909510048, 19: -9.239895713891075, 20: -9.577554029658346, 22: -9.92001789475276, 23: -10.215849102264697, 25: -10.582748892944549, 27: -10.87130640890371, 28: -11.080589882016932, 29: -11.3342668191238, 30: -11.540657838677804, 31: -11.749327346611041, 33: -11.729916229594002, 34: -11.79370468469181, 36: -12.093874673663548, 38: -12.389894208173414, 39: -12.719883197463163, 41: -12.724735976717447, 42: -12.739294314480203, 44: -12.983084424145538, 45: -12.954003681757557, 46: -13.179379435264716, 48: -13.332053332801745, 49: -13.332053332801745, 50: -13.535618529517876, 52: -13.644671313472935, 54: -13.724643355040014, 56: -13.877317252577045, 59: -14.088152634890212, 61: -14.124503562875233, 62: -14.219015975636214, 65: -14.415310986755392, 67: -14.414527947956659, 68: -14.618876183471434, 70: -14.691578039441474, 73: -14.277177460412263, 74: -14.415310986755392, 75: -14.7248194858736, 77: -14.79291172453236, 79: -14.872352669634134, 80: -14.96314232117909, 81: -15.00475424480387, 83: -14.92153039755431, 84: -15.118241309235021, 86: -15.152287428564403, 88: -15.223719497488881, 89: -15.202292469954768, 90: -15.268346707857184, 91: -15.377887877756141, 93: -15.475183591670458, 94: -15.483224608734746, 96: -15.476082266223461, 97: -15.511793978780231, 98: -15.507032417105956, 99: -15.578455842219496, 100: -15.494954472429571, 101: -15.459410238983285, 103: -15.60666492040387, 104: -15.629514784762184, 106: -15.746302980371656, 107: -16.05096783848317, 109: -16.22107238426216, 110: -16.26677211297888, 111: -16.31754958933086, 113: -16.320088463148398, 115: -16.402826528386992, 117: -16.406260880463947, 119: -16.50929144277122, 121: -16.50929144277122, 123: -16.73252432777046, 125: -16.77326888489502, 128: -16.947990435779342, 131: -16.93858545238518, 133: -17.034747310538716, 137: -17.058787775077057, 140: -17.1, 1: -5.25790689070913, 3: -5.467269177530689, 7: -6.274519575229911, 13: -7.873441948499206, 17: -8.92490589003996, 21: -9.86057418675713, 24: -10.468756467162182, 26: -10.829509152662267, 32: -11.72161237841358, 35: -12.080426292493922, 37: -12.295106487882403, 40: -12.588116942253178, 43: -12.85422084811121, 47: -13.17887437278809, 51: -13.47829550227808, 53: -13.62011517192167, 55: -13.756876367462038, 57: -13.888436808107508, 58: -13.952177607231794, 60: -14.075345503134427, 63: -14.248536246191305, 64: -14.30298372922047, 66: -14.406705514379235, 69: -14.54898917878149, 71: -14.634935357113518, 72: -14.675296478010038, 76: -14.820583195146524, 78: -14.884719727909614, 82: -15.000802675351098, 85: -15.082107735030647, 87: -15.136207200277804, 92: -15.281759980300818, 95: -15.382871469479237, 102: -15.678666290605454, 105: -15.832299233826168, 108: -15.998560044433985, 112: -16.229975538524485, 114: -16.344648861545096, 116: -16.455006578636755, 118: -16.558180375435654, 120: -16.65141573253979, 122: -16.732329248482422, 124: -16.799227422618685, 126: -16.85149354192952, 127: -16.872353314666626, 129: -16.90502734617631, 130: -16.9179005101792, 132: -16.94076801104046, 134: -16.96782225922062, 135: -16.986931737179972, 136: -17.0125190107062, 138: -17.09355088815414, 139: -17.15522754072819}
data_14k_val = dict(sorted(data_14k_val.items()))
x_14k = list(data_14k_val.keys())           # list() needed for python 3.x
x_14k = [i*0.86 for i in x_14k]
y_14k = list(data_14k_val.values()) 

data_19k_val = {1: -6.12312123, 9: -8.126389123, 18: -10.7887687, 21: -10.9900998839182, 26: -12.8530854151719, 28: -12.691724463646, 30: -13.1904764956352, 31: -13.3958449793954, 33: -13.9679428984418, 34: -14.2466572692593, 36: -14.2, 42: -14.4813641078425, 43: -15.024123672066, 47: -15.1121387365347, 50: -14.8187551883057, 51: -15.2441613332377, 54: -15.5522140588781, 57: -15.5962215911124, 59: -15.7869208974612, 62: -15.713575010404, 64: -16.0656352682787, 66: -15.8749359619299, 69: -16.1829886875702, 72: -16.2, 77: -16.4470338809763, 79: -16.3689090581704, 81: -16.4763722357992, 82: -16.465521215423, 84: -16.6524023647365, 86: -16.5465507666672, 87: -16.6026481482977, 89: -16.7257482517938, 91: -16.7535785454835, 94: -16.8368526527307, 96: -16.9457859129655, 99: -16.8539327582432, 102: -16.9751242677884, 104: -16.5925666274481, 105: -17.0840875495779, 109: -17.2, 110: -17.0, 112: -17.1828722239919, 114: -17.1487258463991, 115: -17.1673817729463, 117: -17.3632690016926, 120: -17.2559974240458, 122: -17.4099088180607, 123: -17.3819249282398, 125: -17.2, 127: -17.4332287262448, 128: -17.3073012220508, 130: -17.4938604875234, 132: -17.5778121569861, 133: -17.3840975960648, 135: -17.1908660096204, 137: -17.3042845494899, 138: -17.6763294385026, 140: -17.6058417491968}
data_19k_val = dict(sorted(data_19k_val.items()))
x_19k = list(data_19k_val.keys())           # list() needed for python 3.x
x_19k = [i*1.25 for i in x_19k]
y_19k = list(data_19k_val.values())  

plt.plot(x_8k, y_8k, marker='o', label='6.6 giờ dữ liệu ')
plt.plot(x_14k, y_14k, marker='s', label='11.4 giờ dữ liệu ')
plt.plot(x_19k, y_19k, marker='x', label='16.6 giờ dữ liệu')
plt.xlabel('Thời gian huấn luyện (giờ)')
plt.ylabel('SI-SDR loss')
plt.legend()
plt.show()








# COMPARE INFER 1,2,3N
# --------------
# infer_1N = [0.2725076675415039, 0.45752487182617185, 0.6468897581100463, 0.8279765844345093, 1.0932063341140748]
# infer_2N = [0.37462220191955564, 0.6357799291610717, 0.923383092880249, 1.1911617279052735, 1.4679750204086304]
# infer_3N = [0.38176095485687256, 0.6695007801055908, 0.9641615152359009, 1.2470854997634888, 1.6379263877868653]
# infer_1N = [i*100 for i in infer_1N]
# infer_2N = [i*100 for i in infer_2N]
# infer_3N = [i*100 for i in infer_3N]

# infer_1N_mem = [946, 1126, 1288, 1438, 1640]
# infer_2N_mem = [966, 1142, 1304, 1450, 1632]
# infer_3N_mem = [976, 1174, 1356, 1488, 1688]
# infer_1N_mem = [i-504 for i in infer_1N_mem]
# infer_2N_mem = [i-524 for i in infer_2N_mem]
# infer_3N_mem = [i-552 for i in infer_3N_mem]

# data_times = [i for i in range(1,6)]
# plt.plot(data_times, infer_1N, marker='o', label='1 SepFormer Block')
# plt.plot(data_times, infer_2N, marker='s', label='2 SepFormer Block')
# plt.plot(data_times, infer_3N, marker='x', label='3 SepFormer Block')
# plt.xlabel('Độ dài dữ liệu đầu vào tính theo giây')
# plt.ylabel('Thời gian suy luận (Mili giây)')
# plt.legend()
# plt.show()
# --------------